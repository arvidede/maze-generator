{"version":3,"sources":["assets/js/constants.js","assets/js/helpers.js","assets/js/Cell.js","assets/js/sketch.js","index.js"],"names":["CELL_WIDTH","CELLS","Math","floor","window","innerWidth","innerHeight","index","col","row","Cell","width","p","x","y","walls","up","down","left","right","visited","color","stroke","line","noStroke","fill","rect","direction","neighbor","removeWall","getOppositeDirection","grid","neighbors","unvisitedNeighbors","Object","keys","map","n","filter","e","length","random","Sketch","currentCell","nextCell","stack","setup","createCanvas","push","round","background","frameRate","draw","show","getNeighbor","pop","noLoop","noFill","module","hot","accept","location","reload","p5"],"mappings":"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","file":"maze-generator.5bbba75c.js","sourceRoot":"..","sourcesContent":["export const CELL_WIDTH = 30\nexport const CELLS = Math.floor((window.innerWidth > window.innerHeight ? window.innerHeight : window.innerWidth) / CELL_WIDTH) - 2\n","import { CELLS, CELL_WIDTH } from './constants.js'\n\nexport const index = (col, row) => {\n    if(col < 0 || row < 0 || col > CELLS - 1 || row > CELLS - 1) return -1\n    return col + row * CELLS\n}\n","import { index } from './helpers.js'\n\nexport default class Cell {\n    constructor(col, row, width, p) {\n        this.col = col\n        this.row = row\n        this.width = width\n        this.x = col * width\n        this.y = row * width\n        this.p = p\n        this.walls = {\n            up: true,\n            down: true,\n            left: true,\n            right: true\n        }\n        this.visited = false\n    }\n\n    show(color = 0) {\n\n        this.p.stroke(255)\n\n        if(this.walls.up) {\n            this.p.line(this.x, this.y, this.x + this.width, this.y)\n        }\n\n        if(this.walls.down) {\n            this.p.line(this.x, this.y + this.width, this.x + this.width, this.y + this.width)\n        }\n\n        if(this.walls.left) {\n            this.p.line(this.x, this.y, this.x, this.y + this.width)\n        }\n\n        if(this.walls.right) {\n            this.p.line(this.x + this.width, this.y, this.x + this.width, this.y + this.width)\n        }\n\n        if(this.visited) {\n            this.p.noStroke()\n            this.p.fill(this.p.color(color ? color : 50, 75))\n            this.p.rect(this.x, this.y, this.width, this.width)\n        }\n    }\n\n    getOppositeDirection(direction) {\n        switch(direction) {\n            case 'up':\n                return 'down'\n            case 'down':\n                return 'up'\n            case 'left':\n                return 'right'\n            case 'right':\n                return 'left'\n        }\n\n    }\n\n    removeWall(direction, neighbor=null) {\n        this.walls[direction] = false\n        if(neighbor) neighbor.removeWall(this.getOppositeDirection(direction))\n    }\n\n    getNeighbor(grid) {\n\n        const neighbors = {\n            up: grid[index(this.col, this.row - 1)],\n            down: grid[index(this.col, this.row + 1)],\n            left: grid[index(this.col - 1, this.row)],\n            right: grid[index(this.col + 1, this.row)]\n        }\n\n        const unvisitedNeighbors = Object.keys(neighbors).map(n => neighbors[n] && !neighbors[n].visited ? n : null).filter(e => e)\n\n        if(unvisitedNeighbors.length > 0) {\n            const direction = unvisitedNeighbors[Math.floor(unvisitedNeighbors.length * Math.random())]\n            const neighbor = neighbors[direction]\n            this.removeWall(direction, neighbor)\n            return neighbor\n        }\n\n        return null\n    }\n}\n","import Cell from './Cell.js'\nimport { CELLS, CELL_WIDTH } from './constants.js'\nimport { index } from './helpers.js'\n\nconst Sketch = (p) => {\n    const grid = []\n    const stack = []\n    let currentCell\n    let nextCell\n\n    p.setup = () => {\n        p.createCanvas(CELLS * CELL_WIDTH + 2, CELLS * CELL_WIDTH + 2)\n\n        for(let row = 0; row < CELLS; row++) {\n            for(let col = 0; col < CELLS; col++) {\n                grid.push(new Cell(col, row, CELL_WIDTH, p))\n            }\n        }\n\n        currentCell = grid[Math.round(grid.length * Math.random())]\n        currentCell.visited = true\n        p.background(0)\n        p.frameRate(500)\n    };\n\n    p.draw = () => {\n        for(let cell of grid) {\n            cell.show()\n        }\n\n        // Depth-first: https://en.wikipedia.org/wiki/Maze_generation_algorithm#Recursive_backtracker\n\n        currentCell.visited = true\n        currentCell.show(100)\n\n        nextCell = currentCell.getNeighbor(grid)\n\n        if(nextCell) {\n            stack.push(currentCell)\n            currentCell = nextCell\n        } else if(stack.length > 0) {\n            currentCell = stack.pop()\n        } else {\n            p.noLoop()\n        }\n\n        p.stroke(255)\n        p.noFill()\n        p.rect(0, 0, CELLS * CELL_WIDTH, CELLS * CELL_WIDTH)\n    };\n};\n\nexport default Sketch;\n","if (module.hot) {\n    module.hot.accept(function () {\n        window.location.reload();\n    })\n}\n\nimport Sketch from './assets/js/sketch';\n\nnew p5(Sketch);\n"]}